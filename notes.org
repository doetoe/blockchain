* The emphasis is on readability and simplicity, not on performance or other optimizations. For example

- When another miner generated a longer chain than you have, the full blockchain is downloaded from it, verified and then replaces the local one, rather than only downloading the required blocks, which would add the problem that the blockchain may get updated (even replaced) on the remote miner, etc.

- all unprocessed transactions are served rather than just some number

* To be done
- In node.py get rid of argument active_peers in favor of using self.active_peers
- Test mempool functionality in the extension of node in the file transactionnode.py
- remove double-spend transactions (maybe). Alternatively they could float around until the balance is high enough to be executed.
- balance (user): allow incomplete address (prefix, as long as it is unique)
- In validity check of blockchains containing transactions make sure that the balance is never negative. New function in transaction.py
- Good tests for web services
- deal with wrong nodes in an elegant way
- confirm that an existing database connection can be forked (this is done)
- balances web service doesn't work, maybe none of the funcionality works
- Wallet class, AddressBook etc - not important

* Validity of a block
- correct format
- hash satisfies difficulty
- chain goes back to genesis block
- correct number of transactions 
- no duplicate transactions in whole chain
- correct block reward
- balance never below 0 for any address in the chain
- timestamp

* Robustness
- nodes and mempool continue working if the tracker is down.

* Nodes
Each node serves as a full node, a miner and a tracker. When it is started, it tries to find other nodes first by iterating through a list TRACKER_ADDRESSES that is in the configuration file config.py. Alternatively a known node address can be specified.

It obtains a list of peers from each one of them, and registers with all running nodes.

It then starts both mining, and operating a full node (serving the full blockchain) as well as peer-discovery services. In the future it should also provide mempool services.

A parent process runs a web server. A child process maintains and updates
- a set of peers
- the blockchain
- a database of all transactions

* Operation
- Start the tracker. 
- Start one or more nodes. These will start mining and synchronizing. If the tracker goes down, they will keep mining (and trying to connect and broadcast/synchronize).
- Start the mempool
- Send transactions to the mempool
- Nodes pull transactions from the mempool to include in their blocks.
